# -*- coding: utf-8 -*-
"""SCOA_MINI_PROJECT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xVohQEHuN28k4QSSNhOe492WzZDJgqv2
"""

import numpy as np
import pandas as pd
import random



from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

from google.colab import drive
drive.mount('/content/drive',force_remount=True)
data = pd.read_csv('/content/drive/My Drive/pima.csv',sep=',' , header = 0)

attributes = ["pregnancies", "glucose", "blood pressure", "skin thickness", "insulin","BMI","Diabetes","age","output"]
data.columns = attributes
data.head()

df = data.iloc[:, 0:8]
label=data.iloc[:, 8]

print(df.head())

import matplotlib.pyplot as plt

from sklearn.preprocessing import StandardScaler
scaler_x=StandardScaler()
X=scaler_x.fit_transform(df)
df = pd.DataFrame(X, columns = ["pregnancies", "glucose", "blood pressure", "skin thickness", "insulin","BMI","Diabetes","age"])

df.head()

diabetic = df.loc[label == 1]
not_diabetic = df.loc[label == 0]
plt.scatter(diabetic.iloc[:, 1], diabetic.iloc[:, 4], s=10, label='Diabetic')
plt.scatter(not_diabetic.iloc[:, 1], not_diabetic.iloc[:, 4], s=10, label='Not Diabetic')
plt.xlabel("glucose")
plt.ylabel("insulin")
plt.legend()
plt.show()

#splitting the model into training and testing set
X_train, X_test, y_train, y_test = train_test_split(df, label, test_size=0.30, random_state=101)

#training a logistics regression model
logmodel = LogisticRegression(max_iter=10000)
logmodel.fit(X_train,y_train)
predictions = logmodel.predict(X_test)
print("Accuracy = "+ str(accuracy_score(y_test,predictions)))

#defining various steps required for the genetic algorithm
def initilization_of_population(size,n_feat):
    population = []
    for i in range(size):
        chromosome = np.ones(n_feat,dtype=np.bool)
        chromosome[:int(0.3*n_feat)]=False
        np.random.shuffle(chromosome)
        population.append(chromosome)
    return population

def fitness_score(population):
    scores = []
    for chromosome in population:
        logmodel.fit(X_train.iloc[:,chromosome],y_train)
        predictions = logmodel.predict(X_test.iloc[:,chromosome])
        scores.append(accuracy_score(y_test,predictions))
    scores, population = np.array(scores), np.array(population) 
    inds = np.argsort(scores)
    return list(scores[inds][::-1]), list(population[inds,:][::-1])

def selection(pop_after_fit,n_parents):
    population_nextgen = []
    for i in range(n_parents):
        population_nextgen.append(pop_after_fit[i])
    return population_nextgen

def crossover(pop_after_sel):
    population_nextgen=pop_after_sel
    for i in range(len(pop_after_sel)):
        child=pop_after_sel[i]
        child[3:7]=pop_after_sel[(i+1)%len(pop_after_sel)][3:7]
        population_nextgen.append(child)
    return population_nextgen

def mutation(pop_after_cross,mutation_rate):
    population_nextgen = []
    for i in range(0,len(pop_after_cross)):
        chromosome = pop_after_cross[i]
        for j in range(len(chromosome)):
            if random.random() < mutation_rate:
                chromosome[j]= not chromosome[j]
        population_nextgen.append(chromosome)
    #print(population_nextgen)
    return population_nextgen

def generations(size,n_feat,n_parents,mutation_rate,n_gen,X_train,
                                   X_test, y_train, y_test):
    best_chromo= []
    best_score= []
    population_nextgen=initilization_of_population(size,n_feat)
    for i in range(n_gen):
        scores, pop_after_fit = fitness_score(population_nextgen)
        print(scores[:2])
        pop_after_sel = selection(pop_after_fit,n_parents)
        pop_after_cross = crossover(pop_after_sel)
        population_nextgen = mutation(pop_after_cross,mutation_rate)
        best_chromo.append(pop_after_fit[0])
        best_score.append(scores[0])
    return best_chromo,best_score

chromo,score=generations(size=200,n_feat=8,n_parents=100,mutation_rate=0.10,
                     n_gen=20,X_train=X_train,X_test=X_test,y_train=y_train,y_test=y_test)
logmodel.fit(X_train.iloc[:,chromo[-1]],y_train)
predictions = logmodel.predict(X_test.iloc[:,chromo[-1]])
print("Accuracy score after genetic algorithm is= "+str(accuracy_score(y_test,predictions)))

print(chromo[-1])
print(score[-1])

print(X_train)
print(X_train.iloc[:,chromo[-1]])

test_diabetic = X_test.loc[y_test == 1]

pred_diabetic = X_test.loc[predictions == 1]

plt.scatter(test_diabetic.iloc[:, 1], test_diabetic.iloc[:, 4], s=40, label='Diabetic')
plt.scatter(pred_diabetic.iloc[:, 1], pred_diabetic.iloc[:, 4], s=5, label='Predicted Diabetic')
plt.xlabel("glucose")
plt.ylabel("insulin")
plt.legend()
plt.show()